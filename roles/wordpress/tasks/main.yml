---
#- name: Download Latest WordPress
#  get_url:
#    url: https://wordpress.org/latest.tar.gz
#    dest: /srv/wordpress-latest.tar.gz

#- name: Extract archive
# command: chdir=/srv/ /bin/tar xvf wordpress-latest.tar.gz creates=/srv/wordpress

### BROKEN ###
# Generates: https://ideone.com/CjL77O https://ideone.com/seNzUe https://ideone.com/7kkIJb
# Result: 403 Forbidden
- name: "Create WordPress directory at {{ wp_dir }}"
  file:
    path: "{{ wp_dir }}"
    state: directory

- name: Download the latest version of Wordpress
  get_url:
    url: "{{ wp_url }}"
    dest: "{{ wp_dir }}/latest.tar.gz"

- name: extract the latest WordPress
  unarchive:
    src: "{{ wp_dir }}/latest.tar.gz"
    dest: "{{ wp_dir }}"
    remote_src: no
### BROKEN ###

- name: Add group "wordpress"
  group:
    name: wordpress

- name: Add user "wordpress"
  user:
    name: wordpress
    group: wordpress
    home: "{{ wp_dir }}"

- name: Fetch random salts for WordPress config
  uri:
    url: "{{ wp_salt_url }}"
    methond: GET
    return_content: yes
  register: wp_salt

- name: Print wp_salt
  debug:
    var: wp_salt.content

- name: Create WordPress database {{ wp_db_name }}
  mysql_db:
    name: "{{ wp_db_name }}"
    state: present
  when: wp_new_db == true

- name: Copy database {{ wp_db_name }} file
  copy:
    src: "{{ wp_db_name }}.sql.bz2"
    dest: /tmp
  when: wp_new_db == false

- name: Restore {{ wp_db_name }} database
  mysql_db:
    name: "{{ wp_db_name }}"
    state: import
    target: /tmp/{{ wp_db_name }}.sql.bz2
  when: wp_new_db == false

- name: Create WordPress database user
  mysql_user:
    name: "{{ wp_db_user }}"
    password: "{{ wp_db_password }}"
    priv: "{{ wp_db_name }}.*:ALL"
    host: 'localhost'
    state: present

- name: Copy WordPress config file
  template:
    src: wp-config.php
    dest: "{{ wp_dir }}/wp-config.php"

- name: Change ownership of WordPress installation
  file:
    path: "{{ wp_dir }}"
    owner: wordpress
    group: wordpress
    state: directory
    recurse: yes

- name: set the SELinux policy for the Wordpress directory
  sefcontext:
    target: '{{ wp_dir }}(/.*)?'
    setype: httpd_sys_content_t
    state: present
    reload: yes
  when: sel_disable == false

- name: set the SELinux policy for wp-config.php
  sefcontext:
    target: '{{ wp_dir }}/wp-config\.php'
    setype: httpd_sys_script_exec_t
    state: present
    reload: yes
  when: sel_disable == false

- name: set the SELinux policy for wp-content directory
  sefcontext:
    target: '{{ wp_dir }}/wp-content(/.*)?'
    setype: httpd_sys_rw_content_t
    state: present
    reload: yes
  when: sel_disable == false

- name: set the SELinux policy for the *.php files
  sefcontext:
    target: '{{ wp_dir }}/.*\.php'
    setype: httpd_sys_script_exec_t
    state: present
    reload: yes
  when: sel_disable == false

- name: set the SELinux policy for the Upgrade directory
  sefcontext:
    target: '{{ wp_dir }}/wp-content/upgrade(/.*)?'
    setype: httpd_sys_rw_content_t
    state: present
    reload: yes
  when: sel_disable == false

- name: set the SELinux policy for the Uploads directory
  sefcontext:
    target: '{{ wp_dir }}/wp-content/uploads(/.*)?'
    setype: httpd_sys_rw_content_t
    state: present
    reload: yes
  when: sel_disable == false

- name: set the SELinux policy for the wp-includes php files
  sefcontext:
    target: '{{ wp_dir }}/wp-includes/.*\.php'
    setype: httpd_sys_script_exec_t
    state: present
    reload: yes
  when: sel_disable == false

- name: set the SELinux on all the Files
  command: 'restorecon -Rv {{ wp_dir }}'
  when: sel_disable == false

- name: Start php-fpm Service
  service:
    name: php-fpm
    state: started
    enabled: yes
